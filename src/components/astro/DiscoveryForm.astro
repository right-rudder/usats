---
import { countryPhoneCodes } from "../../data/countriesPhone.js";
const PUBLIC_DISCOVERY_FORM_WEBHOOK_URL = import.meta.env
  .PUBLIC_DISCOVERY_FORM_WEBHOOK_URL;
const PORTAL_API_KEY = import.meta.env.PORTAL_API_KEY;
---

<form
  class="mx-auto max-w-xl pb-10"
  method="POST"
  id="contact_form"
  action=""
  data-astro-reload
>
  <div class="grid grid-cols-1 gap-x-8 gap-y-2 sm:grid-cols-2">
    <div>
      <div class="mt-2.5">
        <input
          type="text"
          name="first-name"
          id="first-name"
          autocomplete="given-name"
          placeholder="First Name"
          required
          class="block w-full py-2 text-muted-200 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        />
      </div>
    </div>
    <div>
      <div class="mt-2.5">
        <input
          type="text"
          name="last-name"
          id="last-name"
          autocomplete="family-name"
          placeholder="Last Name"
          required
          class="block w-full py-2 text-muted-200 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        />
      </div>
    </div>
    <div class="sm:col-span-2">
      <div class="mt-2.5">
        <input
          type="email"
          name="email"
          id="email"
          autocomplete="email"
          placeholder="Email Address"
          required
          class="block w-full py-2 text-muted-200 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        />
      </div>
    </div>
    <p class="ohno">
      <label>
        Don't fill this out if you're human: <input name="confirm-email" />
      </label>
    </p>
    <div class="sm:col-span-2">
      <div class="mt-2.5 flex items-end">
        <div class="mr-4">
          <label for="country-code" class="sr-only">Country Code</label>
          <select
            id="country-code"
            name="country-code"
            autocomplete="tel-country-code"
            class="block w-full py-2 text-muted-200 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
          >
            {
              countryPhoneCodes.map((country) => (
                <option class="bg-accent-900" value={country.value}>
                  {country.name}
                </option>
              ))
            }
          </select>
        </div>
        <div class="relative w-full">
          <label for="phone-number" class="sr-only">Phone Number</label>
          <input
            type="tel"
            name="phone-number"
            id="phone-number"
            autocomplete="tel-national"
            placeholder="Phone Number"
            required
            class="block w-full py-2 text-muted-200 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
          />
        </div>
      </div>
    </div>

    <div class="sm:col-span-2">
      <fieldset class="mt-2.5">
        <legend class="block mb-2 font-extralight text-muted-200">
          Are you interested in becoming an Airplane or Helicopter Pilot?
          <span class="text-red-500">*</span>
        </legend>
        <div class="flex gap-x-6">
          <div class="flex items-center gap-x-2">
            <input
              id="airship-type-airplane"
              name="airship-type"
              type="radio"
              value="Airplane"
              required
              class="h-4 w-4 border-gray-300 text-accent-800 focus:ring-accent-900"
            />
            <label
              for="airship-type-airplane"
              class="block text-sm font-medium leading-6 text-muted-100"
            >
              Airplane
            </label>
          </div>
          <div class="flex items-center gap-x-2">
            <input
              id="airship-type-helicopter"
              name="airship-type"
              type="radio"
              value="Helicopter"
              required
              class="h-4 w-4 border-gray-300 text-accent-800 focus:ring-accent-900"
            />
            <label
              for="airship-type-helicopter"
              class="block text-sm font-medium leading-6 text-muted-100"
            >
              Helicopter
            </label>
          </div>
          <div class="flex items-center gap-x-2">
            <input
              id="airship-type-both"
              name="airship-type"
              type="radio"
              value="Both"
              required
              class="h-4 w-4 border-gray-300 text-accent-800 focus:ring-accent-900"
            />
            <label
              for="airship-type-both"
              class="block text-sm font-medium leading-6 text-muted-100"
            >
              Both
            </label>
          </div>
        </div>
      </fieldset>
    </div>

    <!-- Airplane Program Interest -->
    <div id="airplane-program-container" class="sm:col-span-2 hidden">
      <div class="mt-2.5">
        <label
          for="airplane-interest-program"
          class="block mb-0 font-extralight text-muted-100"
        >
          What is your Airplane aviation goal? <span class="text-red-500"
            >*</span
          >
        </label>
        <select
          id="airplane-interest-program"
          name="airplane-interest-program"
          class="block font-extralight w-full py-2 text-muted-200 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          <option value="" disabled selected class="bg-accent-900"
            >Select airship type first...</option
          >
        </select>
      </div>
    </div>

    <!-- Helicopter Program Interest -->
    <div id="helicopter-program-container" class="sm:col-span-2 hidden">
      <div class="mt-2.5">
        <label
          for="helicopter-interest-program"
          class="block mb-0 font-extralight text-muted-100"
        >
          What is your Helicopter aviation goal? <span class="text-red-500"
            >*</span
          >
        </label>
        <select
          id="helicopter-interest-program"
          name="helicopter-interest-program"
          class="block font-extralight w-full py-2 text-muted-200 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          <option value="" disabled selected class="bg-accent-900"
            >Select airship type first...</option
          >
        </select>
      </div>
    </div>

    <div class="sm:col-span-2">
      <div class="mt-2.5">
        <textarea
          name="message"
          id="message"
          rows="4"
          placeholder="What is your preferred time and day?"
          required
          class="block w-full py-2 text-muted-200 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-300 bg-transparent border-b-[1px] border-gray-300 sm:text-sm sm:leading-6 outline-none"
        ></textarea>
      </div>
    </div>
    <div class="flex gap-x-4 sm:col-span-2">
      <div class="flex h-6 items-center">
        <button
          type="button"
          id="terms-toggle"
          class="flex w-8 flex-none cursor-pointer rounded-full p-px ring-1 ring-inset ring-primary-900/5 transition-colors duration-200 ease-in-out focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-900 bg-gray-200"
          role="switch"
          aria-checked="false"
          aria-labelledby="switch-1-label"
        >
          <span class="sr-only">
            I agree to terms & conditions provided by the company.
          </span>
          <span
            id="terms-thumb"
            class="h-4 w-4 transform rounded-full bg-black shadow-sm ring-1 ring-gray-900/5 transition duration-200 ease-in-out translate-x-0"
            aria-hidden="true"></span>
        </button>
        <input type="hidden" id="agree-terms" name="agree-terms" value="no" />
      </div>
      <label class="text-sm leading-6 text-gray-200" id="switch-1-label">
        I agree to the <a
          href="/privacy-policy"
          target="_blank"
          class="text-muted-200 hover:text-accent-700 font-semibold"
          >Privacy Policy</a
        > and <a
          href="/terms-of-service"
          target="_blank"
          class="text-muted-200 hover:text-accent-700 font-semibold"
          >Terms of Service</a
        > provided by the company. By providing my phone number, I agree to receive
        text messages from the business. I also agree that I may be contacted via
        messaging apps such as WhatsApp or Signal.
      </label>
    </div>
  </div>
  <div class="mt-10">
    <button type="submit" id="submit-btn" class="btn-accent">Book Now</button>
  </div>
</form>

<script define:vars={{ PUBLIC_DISCOVERY_FORM_WEBHOOK_URL, PORTAL_API_KEY }}>
  const aviationGoals = {
    Airplane: [
      { value: "PPP", text: "Professional Pilot Program (PPP)" },
      { value: "PPL", text: "Private Pilot License (PPL)" },
      { value: "IR", text: "Instrument Rating (IR)" },
      { value: "CPL", text: "Commercial Pilot License (CPL)" },
      { value: "CFI", text: "Certified Flight Instructor (CFI)" },
      { value: "CFII", text: "Certified Flight Instructor Instrument (CFII)" },
      { value: "Other", text: "Other Airplane Goal" },
    ],
    Helicopter: [
      { value: "military", text: "Military Training" },
      {
        value: "PPP-H",
        text: "Professional Pilot Program - Helicopter (PPP-H)",
      },
      { value: "PPL-H", text: "Private Pilot License - Helicopter (PPL-H)" },
      { value: "CPL-H", text: "Commercial Pilot License - Helicopter (CPL-H)" },
      { value: "IR-H", text: "Instrument Rating - Helicopter (IR-H)" },
      {
        value: "CFI-H",
        text: "Certified Flight Instructor - Helicopter (CFI-H)",
      },
      {
        value: "CFII-H",
        text: "Certified Flight Instructor Instrument - Helicopter (CFII-H)",
      },
      { value: "Other-H", text: "Other Helicopter Goal" },
    ],
  };

  document.addEventListener("DOMContentLoaded", function () {
    const contactForm = document.getElementById("contact_form");
    const toggle = document.getElementById("terms-toggle");
    const thumb = document.getElementById("terms-thumb");
    const hiddenInput = document.getElementById("agree-terms");
    const submitBtn = document.getElementById("submit-btn");

    const airshipTypeRadios = document.querySelectorAll(
      'input[name="airship-type"]',
    );
    const airplaneProgramContainer = document.getElementById(
      "airplane-program-container",
    );
    const airplaneProgramSelect = document.getElementById(
      "airplane-interest-program",
    );
    const helicopterProgramContainer = document.getElementById(
      "helicopter-program-container",
    );
    const helicopterProgramSelect = document.getElementById(
      "helicopter-interest-program",
    );

    let isChecked = false;

    toggle.addEventListener("click", () => {
      isChecked = !isChecked;
      hiddenInput.value = isChecked ? "yes" : "no";
      toggle.setAttribute("aria-checked", isChecked);
      toggle.classList.toggle("bg-green-600", isChecked);
      toggle.classList.toggle("bg-gray-200", !isChecked);
      thumb.classList.toggle("translate-x-3.5", isChecked);
      thumb.classList.toggle("translate-x-0", !isChecked);

      submitBtn.disabled = !isChecked;
      submitBtn.classList.toggle("cursor-not-allowed", !isChecked);
      submitBtn.classList.toggle("bg-muted-400", !isChecked);
      submitBtn.classList.toggle("hover:bg-muted-400", !isChecked);
      submitBtn.classList.toggle("hover:text-accent-900", !isChecked);
    });

    submitBtn.disabled = true;
    submitBtn.classList.add(
      "cursor-not-allowed",
      "bg-muted-400",
      "hover:bg-muted-400",
      "hover:text-accent-900",
    );

    if (contactForm !== null) {
      contactForm.addEventListener("submit", async (event) => {
        event.preventDefault();
        const formData = new FormData(contactForm);
        const selectedAirshipType = formData.get("airship-type");

        // Validation for program interest based on airship type
        if (selectedAirshipType === "Airplane") {
          if (!formData.get("airplane-interest-program")) {
            alert("Please select your Airplane aviation goal.");
            airplaneProgramSelect.focus();
            return;
          }
        } else if (selectedAirshipType === "Helicopter") {
          if (!formData.get("helicopter-interest-program")) {
            alert("Please select your Helicopter aviation goal.");
            helicopterProgramSelect.focus();
            return;
          }
        } else if (selectedAirshipType === "Both") {
          if (!formData.get("airplane-interest-program")) {
            alert("Please select your Airplane aviation goal.");
            airplaneProgramSelect.focus();
            return;
          }
          if (!formData.get("helicopter-interest-program")) {
            alert("Please select your Helicopter aviation goal.");
            helicopterProgramSelect.focus();
            return;
          }
        } else if (!selectedAirshipType) {
          // Ensure an airship type is selected
          alert("Please select an airship type.");
          // Focus on the first radio button or a relevant element
          return;
        }
        const confirmEmailValue = formData.get("confirm-email");
        if (confirmEmailValue !== "" && confirmEmailValue !== null) {
          console.warn("Honeypot field filled. Preventing submission.");
          return;
        }

        contactForm.action = PUBLIC_DISCOVERY_FORM_WEBHOOK_URL;

        const webhookURL = PUBLIC_DISCOVERY_FORM_WEBHOOK_URL;
        const apiKey = PORTAL_API_KEY;

        const urlEncodedBody = new URLSearchParams(formData).toString();

        const countryCode = formData.get("country-code");
        const phoneNumber = formData.get("phone-number");
        const fullPhoneNumber = `${countryCode}${phoneNumber?.trim() || ""}`;

        const excludedFields = [
          "first-name",
          "last-name",
          "email",
          "phone-number",
          "country-code",
          "confirm-email",
          "agree-terms",
        ];

        const metadata = {};

        for (const [key, value] of formData.entries()) {
          if (!excludedFields.includes(key)) {
            metadata[key] = value?.trim?.() ?? value;
          }
        }

        const jsonBody = {
          first_name: formData.get("first-name")?.trim() || "",
          last_name: formData.get("last-name")?.trim() || "",
          email: formData.get("email")?.trim() || "",
          phone: fullPhoneNumber,
          campaign: "discovery-flight",
          account_random_id: "ac_ad4sxcg0",
          metadata: metadata,
        };

        try {
          const [ghlRes, portalRes] = await Promise.all([
            fetch(webhookURL, {
              method: "POST",
              headers: {
                "Content-Type": "application/x-www-form-urlencoded",
              },
              body: urlEncodedBody,
            }),
            fetch("https://portal.rightruddermarketing.com/api/leads", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
                "x-api-key": apiKey,
              },
              body: JSON.stringify(jsonBody),
            }),
          ]);

          if (ghlRes.ok && portalRes.ok) {
            window.location.href = "/discovery-flight-confirmation";
          } else {
            console.error("Submission failed", {
              ghlStatus: ghlRes.status,
              portalStatus: portalRes.status,
            });
          }
        } catch (err) {
          console.error("Submission error:", err);
        }
      });
    }

    // Helper to populate and configure a select dropdown
    function configureSelect(
      selectElement,
      containerElement,
      goals,
      isEnabled,
      defaultLabel,
    ) {
      selectElement.innerHTML = ""; // Clear existing options

      if (isEnabled && goals && goals.length > 0) {
        const defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = defaultLabel || "Select an option...";
        defaultOption.disabled = true;
        defaultOption.selected = true;
        defaultOption.className = "bg-accent-900";
        selectElement.appendChild(defaultOption);

        goals.forEach((goal) => {
          const option = document.createElement("option");
          option.value = goal.value;
          option.textContent = goal.text;
          option.className = "bg-accent-900";
          selectElement.appendChild(option);
        });
        selectElement.disabled = false;
        selectElement.setAttribute("required", "required");
        selectElement.classList.remove(
          "disabled:opacity-50",
          "disabled:cursor-not-allowed",
        );
        containerElement.classList.remove("hidden");
      } else {
        const placeholderOption = document.createElement("option");
        placeholderOption.value = "";
        placeholderOption.textContent = "Select airship type first...";
        placeholderOption.disabled = true;
        placeholderOption.selected = true;
        placeholderOption.className = "bg-accent-900";
        selectElement.appendChild(placeholderOption);

        selectElement.disabled = true;
        selectElement.removeAttribute("required");
        selectElement.classList.add(
          "disabled:opacity-50",
          "disabled:cursor-not-allowed",
        );
        containerElement.classList.add("hidden");
      }
      selectElement.value = ""; // Ensure the placeholder/default is selected
    }

    function updateInterestProgramOptions(selectedAirshipType) {
      const showAirplane =
        selectedAirshipType === "Airplane" || selectedAirshipType === "Both";
      const showHelicopter =
        selectedAirshipType === "Helicopter" || selectedAirshipType === "Both";

      configureSelect(
        airplaneProgramSelect,
        airplaneProgramContainer,
        aviationGoals.Airplane,
        showAirplane,
        "Select Airplane goal...",
      );
      configureSelect(
        helicopterProgramSelect,
        helicopterProgramContainer,
        aviationGoals.Helicopter,
        showHelicopter,
        "Select Helicopter goal...",
      );
    }

    // Initial setup for dropdowns to ensure they are correctly disabled and hidden
    updateInterestProgramOptions(null);

    airshipTypeRadios.forEach((radio) => {
      radio.addEventListener("change", (event) => {
        updateInterestProgramOptions(event.target.value);
      });
    });
  });
</script>
<!-- Prevent Multiple Submissions  -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.querySelector("form");
    if (form) {
      form.addEventListener("submit", function (e) {
        const submitBtn = form.querySelector<HTMLButtonElement>(
          "button[type='submit']",
        );
        if (submitBtn) {
          submitBtn.disabled = true;
          submitBtn.innerText = "Submitting...";
        }
      });
    }
  });
</script>

<style>
  .ohno {
    @apply hidden;
  }

  .translate-x-3.5 {
    transform: translateX(0.875rem);
  }
</style>
